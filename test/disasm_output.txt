memory_initialization_radix=16;
memory_initialization_vector=
# 初始化寄存器
00100093,  // addi x1, x0, 1      // x1 = 1
00200113,  // addi x2, x0, 2      // x2 = 2
00A00193,  // addi x3, x0, 10     // x3 = 10
00B00213,  // addi x4, x0, 11     // x4 = 11

# 跳转测试1：条件分支（BEQ）
00208263,  // beq x1, x2, +8      // x1==x2则跳转到label1（不会跳）
003100B3,  // add x1, x2, x3      // x1 = x2 + x3（不会跳时执行）
0040006F,  // jal x0, +4          // 跳转到label2

# label1:
004181B3,  // add x3, x3, x4      // x3 = x3 + x4（跳转到这里）

# label2:
00002283,  // lw x5, 0(x0)        // x5 = mem[0]，为后续冒险做准备
005282B3,  // add x5, x5, x5      // x5 = x5 + x5（与上条lw有冒险）
0062A023,  // sw x6, 0(x5)        // mem[x5] = x6

# 跳转测试2：无条件跳转（JAL）
0080006F,  // jal x0, +8           // 跳转到label3

# label3:
00700313,  // addi x6, x0, 7      // x6 = 7
00800393,  // addi x7, x0, 8      // x7 = 8

# 冒险测试2：load-use冒险
00002303,  // lw x6, 0(x0)        // x6 = mem[0]
006383B3,  // add x7, x7, x6      // x7 = x7 + x6（与上条lw有冒险）

# 条件分支跳转（BNE）
00718463,  // bne x3, x7, +8      // x3!=x7则跳转到label4
00C0006F,  // jal x0, +12         // 跳转到程序结尾

# label4:
00900413,  // addi x8, x0, 9      // x8 = 9
00A00493,  // addi x9, x0, 10     // x9 = 10

# 程序结尾
00000013;  // nop                  // 停止